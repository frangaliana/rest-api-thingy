======================
= PRÁCTICA - PARTE 1 =
======================


************************************************************************************************************************************
* Casos de uso (Menos los casos de uso de registro, login y mostrar todos los productos y uno específico el resto de operaciones necesitarán de cabecera de Authorization Bearer => JWT)*
************************************************************************************************************************************
-Registro de usuarios (POST /api/signup):
	*Para crear una cuenta en la base de datos de la aplicacion.
		Con datos en Body: {email, name, password}

-Login básico(POST /api/signin?type=basic):
	*Inicio de sesión, devuelve un jwt que será necesario para todas las peticiones.
	 Datos (email y password) en cabecera Authorization (Basic).

-Login mediante JWT (POST /api/login):
	*Tras el registro de usuario, devolverá un JWT que utilizaremos para iniciar sesión y realizar muchas de las próximas peticiones incluyendo el JWT en cabecera Authorization (Bearer).
-----------------------------------------------------------------Products-----------
-Obtener todos los productos (GET /api/products):
	*Devuelve los datos de todos los productos subidos a la aplicación realizado con paginación de los resultados y cursores para antes y después.

-Obtener un producto específico (GET /api/products/:id):
	*Devuelve los datos del producto específico dado un id de un producto

-Subir un producto (POST /api/products):
	*Sube un producto con los campos (title, price, user, categoryproduct, description, visits, status, publicationdate, salesrating, salescomment), autorización necesaria.

-Modificar un producto ( PUT /api/products/:id):
	*Se podrá cambiar cualquiera de los campos excepto el de publicationdate o user, autorización necesaria.

-Borrar un producto (DELETE /api/products/:id):
	*Se podrá eliminar el producto, autorización necesaria.
---------------------------------------------------------------Users-----------------
-Obtener todos los usuarios(GET /api/users):
	*Devuelve los datos públicos de todos los usuarios (paginación disponible como anteriormente), autorización necesaria.

-Obtener un usuario por id(GET /api/users/:id):
	*Devuelve los datos públicos de un usuario (sin el password), autorización necesaria.

-Modificar un usuario(PUT /api/users/:id):
	*Se puede cambiar cualquier campo excepto el email que es único y signupdate, autorización necesaria.

-Obtener los productos de un usuario específico (GET /api/users/id/products):
	*Se puede obtener todos aquellos productos que tiene un usuario para poder echar un vistazo de aquellos que pudiesen interesar (con paginación disponible como anteriormente), autorización necesaria.

**********************
*Historias de usuario*
**********************

-Como usuario registrado quiero subir un nuevo producto--------------------
---------------------------------------------------------------------------

- Primero realizaríamos el login (Caso de uso: login Basic) con él nos devolvería un JWT que sería el que utilizaríamos para realizar la acción que queremos.
Ahora podemos subir un producto para ser vendido (caso de uso Crear un producto nuevo). Una vez creado podrán verlo aquellos usuarios que estén logueados en la aplicación, mientras que de la otra forma sólo podrían ver el total de los productos paginados (Caso de uso: get Productos).

-Como usuario a registrar quiero ver los productos de un usuario en concreto-
----------------------------------------------------------------------------

Primero tendría que registrarme (Caso de uso: registro JWT), loguearme (Caso de uso: login JWT) con él nos devolvería un JWT que sería el que utilizaríamos para realizar dichas opciones, ahora tengo un usuario concreto al que quiero ver, por ello simplemente accediendo a un producto o sabiéndolo previamente podría acceder a todo el catálogo de los productos de dicho usuario (Caso de uso: get productsUser)
y devuelve los datos del usuario del jwt sin pasar ninguna id).

===========================================================================================================================
IMPORTANTE: es necesario tener una Base de Datos en MongoDB con el nombre: thingydb
- Los parámetros de esta están estipulados en el archivo config.js
- Para realizar las pruebas más de una vez, será necesario al menos ejecutar en MongoDB los siguientes comandos para que no boicoteen la BD:
	* use thingydb;
	* db.users.remove({})
	* db.products.remove({})
Existe un enlace a GITHUB que te lleva al proyecto de dicha API con su documentación en archivo README.md:
	* https://github.com/frangaliana/rest-api-thingy

======================
= PRÁCTICA - PARTE 2 =
======================

IMPORTANTE: 

** Necesario tener una Base de Datos en MongoDB con el nombre: thingydb
- Los parámetros de esta están estipulados en el archivo config.js

0. Ejecutar el comando npm install para instalar las librerías pertinentes

1. Cargar la aplicación de la API (el servidor) con: npm start

2. Crear un usuario para poder loguearse:
Por ejemplo: Petición POST a http://localhost:3000/api/signup
		- Incluyendo en el body:
			email: fjgc9@alu.ua.es
			name: Francisco Javier
			password: 1234

A partir de ahí

3. Cargar el cliente para mostrar la web:
	npm run watch (cargará sólo la parte de React)
	npm run watch_estandar (cargará sólo la parte sin React con plantillas Handlebars)

4. A continuación iniciar sesión y navegar por la web observando las distintas opciones implementadas, (incluyen todas las que pide dicho enunciado)


- PARTE OBLIGATORIA							   -
----------------------------------------------------------------------------
URL's:
	1. React -> http://localhost:3000/web
	2. jQuery+Handlebars -> http://localhost:3000/web/users.html


Cliente dividido por React desde el componente principal (App) en:
- Archivo para el Login con respectiva validación de campos

- Archivo para manejar todas las opciones del directorio de los productos (tabla con productos y sus detalles pinchando encima, y opciones para añadir un producto, editar cada producto e incluso borrarlo con su respectiva actualización del momento, estas opciones se realizan desde un popup que permite editar los datos o crearlos.

- Archivo específico que consta del formulario para crear/editar un producto apoyándonos en el mismo para realizar las 2 opciones como comentaste en las clases, a base de condicionales seleccionamos una u otra opción según convenga por el botón seleccionado por el usuario.

Dentro de todos los componentes y en lo que sería como la página principal de los productos se ayuda de una Barra de Navegación para darse de baja, ir a la página principal y a la de Clientes, esta sin React donde podemos ver los usuarios existentes, abrir sus detalles, así como editar sus nombres puesto que no somos un administrador y no podemos editar contraseñas de otros y borrarlos, en el caso de que borrasemos nuestro usuario saldríamos expulsados a la página de login.

- PARTE OPTATIVA                                                           -
----------------------------------------------------------------------------

- Realizamos el estilo visual de la web. Usando Bootstrap, hojas de estilo pertinentes y con React para los componentes
- Realizamos el mostrar los mensajes al usuario cuando se desconecta, cuando crea, edita, borra un producto, cuando intenta acceder a los vendedores sin estar logueado, etc con sus respectivas validaciones para ello no utilizamos ninguna libería de terceros, simplemente React con el API estándar de JS + CSS.
